# Generated by Django 4.0.4 on 2024-04-14 03:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import myapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_number', models.CharField(max_length=10)),
                ('floor', models.IntegerField()),
                ('bedrooms', models.IntegerField(blank=True, null=True)),
                ('bathrooms', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Buyer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contact_info', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('area', models.IntegerField(blank=True, null=True)),
                ('real_estate_number', models.CharField(blank=True, max_length=255, null=True)),
                ('chimoku', models.CharField(choices=[('田', '田'), ('畑', '畑'), ('宅地', '宅地'), ('塩田', '塩田'), ('鉱泉地', '鉱泉地'), ('池沼', '池沼'), ('山林', '山林'), ('牧場', '牧場'), ('原野', '原野'), ('墓地', '墓地'), ('境内地', '境内地'), ('運河用地', '運河用地'), ('水道用地', '水道用地'), ('用悪水路', '用悪水路'), ('ため池', 'ため池'), ('堤', '堤'), ('井溝', '井溝'), ('保安林', '保安林'), ('公衆用道路', '公衆用道路'), ('公園', '公園'), ('雑種地', '雑種地')], default='田', max_length=10)),
                ('chimoku_status', models.CharField(blank=True, max_length=20, null=True)),
                ('mochibun', models.CharField(blank=True, max_length=20, null=True)),
                ('right', models.CharField(choices=[('所有権', '所有権'), ('地上権', '地上権'), ('賃借権', '賃借権')], default='所有権', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('company_name', models.CharField(max_length=100)),
                ('cphone_number', models.CharField(max_length=15, null=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('fax_number', models.CharField(max_length=15)),
                ('address', models.CharField(max_length=255)),
                ('housenumber', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=50)),
                ('name_leader', models.CharField(max_length=50)),
                ('department', models.CharField(max_length=50)),
                ('company_number', models.CharField(max_length=50)),
                ('housing_license', models.CharField(max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('land_quantity', models.IntegerField(default=0)),
                ('building_quantity', models.IntegerField(default=0)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('additional_requirements', models.TextField(blank=True, null=True)),
                ('plan', models.CharField(choices=[('light', 'ライトプラン'), ('medium', 'ミディアムプラン'), ('premium', 'プレミアムプラン')], default='light', max_length=10)),
                ('expected_contract_date', models.DateField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='attachments/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Land_m',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('baiuri', '売買の売主'), ('baidai', '売買の代理'), ('baibai', '売買の媒介'), ('kouuri', '交換の売主'), ('koudai', '交換の代理'), ('koubai', '交換の媒介')], max_length=10)),
                ('total_area', models.IntegerField(blank=True, null=True)),
                ('actual_total_area', models.IntegerField(blank=True, null=True)),
                ('options', myapp.models.MultiSelectField(blank=True, choices=[('kari_kanchi', '仮換地'), ('horyuchi_yoteichi', '保留地予定地')], max_length=20)),
                ('survey_map', models.CharField(blank=True, choices=[('kakutei', '確定測量図'), ('genkyou', '現況測量図'), ('chiseki', '地積測量図'), ('etc', 'その他')], max_length=10)),
                ('survey_map_date', models.CharField(max_length=100)),
                ('land_etc', models.TextField(blank=True)),
                ('名義人住所', models.CharField(max_length=255)),
                ('名義人氏名', models.CharField(max_length=255)),
                ('所有権にかかる権利に関する事項_甲', models.BooleanField(default=True)),
                ('差押登記', models.BooleanField(default=True)),
                ('仮差押', models.BooleanField(default=True)),
                ('仮処分', models.BooleanField(default=True)),
                ('所有権移転仮登記', models.BooleanField(default=True)),
                ('所有権にかかる権利に関する事項_乙', models.BooleanField(default=True)),
                ('地上権', models.BooleanField(default=True)),
                ('抵当権', models.BooleanField(default=True)),
                ('根抵当権', models.BooleanField(default=True)),
                ('賃借権', models.BooleanField(default=True)),
                ('備考_1', models.TextField(blank=True)),
                ('該当_2', models.BooleanField(default=True)),
                ('説明書参照_2', models.TextField(blank=True)),
                ('第三者による占有', models.BooleanField(default=True)),
                ('占有者住所', models.CharField(max_length=255)),
                ('占有者氏名', models.CharField(max_length=255)),
                ('借地人', models.BooleanField(default=True)),
                ('賃貸借', models.BooleanField(default=True)),
                ('使用貸借', models.BooleanField(default=False)),
                ('blank_3', models.BooleanField(default=False)),
                ('blank_3_detail', models.CharField(max_length=255)),
                ('備考_3', models.TextField(blank=True)),
                ('区域区分_内', models.CharField(blank=True, choices=[('SICHO', '市街化区域'), ('SICHOCHOUSEI', '市街化調整区域'), ('その他', '線引きされていない区域')], max_length=20)),
                ('区域区分_外', models.CharField(blank=True, choices=[('JYUNTOSHI', '準都市計画区域'), ('TOSHI', '都市計画区域・準都市計画区域外')], max_length=20)),
                ('開発行為をする場合', models.BooleanField(default=True)),
                ('許可_maru1', models.BooleanField(default=True)),
                ('開発許可申請後の場合', models.BooleanField(default=False)),
                ('許可済_maru1', models.BooleanField(default=False)),
                ('開発行為完了の場合', models.BooleanField(default=False)),
                ('工場完了公告有無', models.BooleanField(default=False)),
                ('都市計画制限有無', models.BooleanField(default=True)),
                ('都市計画施設等の区域内', models.BooleanField(default=True)),
                ('都市計画事業の事業地内', models.BooleanField(default=True)),
                ('blank_maru2', models.CharField(blank=True, max_length=100, null=True)),
                ('計画事業名', models.CharField(blank=True, max_length=100, null=True)),
                ('date_maru2', models.DateField(blank=True, null=True)),
                ('用途地域_A', models.CharField(choices=[('A', '第1種低層住居専用地域'), ('B', '第2種低層住居専用地域'), ('C', '第1種中高層住居専用地域'), ('D', '第2種中高層住居専用地域'), ('E', '第1種住居地域'), ('F', '第2種住居地域'), ('G', '準住居地域'), ('H', '田園住居地域'), ('I', '近隣商業地域'), ('J', '商業地域'), ('K', '準工業地域'), ('L', '工業地域'), ('M', '工業専用地'), ('Z', ' ')], default='Z', max_length=50)),
                ('用途地域_B', models.CharField(choices=[('A', '第1種低層住居専用地域'), ('B', '第2種低層住居専用地域'), ('C', '第1種中高層住居専用地域'), ('D', '第2種中高層住居専用地域'), ('E', '第1種住居地域'), ('F', '第2種住居地域'), ('G', '準住居地域'), ('H', '田園住居地域'), ('I', '近隣商業地域'), ('J', '商業地域'), ('K', '準工業地域'), ('L', '工業地域'), ('M', '工業専用地'), ('Z', ' ')], default='Z', max_length=50)),
                ('特別用途地区', models.BooleanField(default=False)),
                ('特定用途制限地域', models.BooleanField(default=False)),
                ('blank_maru4_1', models.CharField(blank=True, max_length=50, null=True)),
                ('高層主居誘導地球', models.BooleanField(default=False)),
                ('高度地区', models.BooleanField(default=False)),
                ('高度利用地区', models.BooleanField(default=False)),
                ('防火地域', models.BooleanField(default=False)),
                ('準防火地域', models.BooleanField(default=False)),
                ('特定防災街区整備地区', models.BooleanField(default=False)),
                ('風致地区', models.BooleanField(default=False)),
                ('blank_maru4_2', models.CharField(blank=True, max_length=50, null=True)),
                ('指定建蔽率', models.IntegerField(blank=True, null=True)),
                ('建蔽率の緩和', models.TextField(blank=True)),
                ('指定容積率', models.IntegerField(blank=True, null=True)),
                ('特殊容積率の適用', models.BooleanField(default=False)),
                ('特殊容積率', models.IntegerField(blank=True, null=True)),
                ('幅員', models.IntegerField(blank=True, null=True)),
                ('特定道路による緩和', models.IntegerField(blank=True, null=True)),
                ('道路幅員制限', models.IntegerField(blank=True, null=True)),
                ('備考_4', models.TextField(blank=True)),
                ('道路傾斜制限', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('隣地斜線制限', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('北側斜線制限', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('日影規制', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('絶対高さ制限', models.CharField(choices=[('YES1', '有(10m)'), ('NONE', ' '), ('NO', '無'), ('YES2', '有(12m)')], default='NONE', max_length=10)),
                ('外壁後退距離制限_c', models.BooleanField(default=False)),
                ('外壁後退距離制限', models.CharField(choices=[('b', '1m以上'), ('none', ' '), ('a', '1.5m以上')], default='none', max_length=10)),
                ('敷地面積の制限_c', models.BooleanField(default=False)),
                ('敷地面積の制限', models.IntegerField(blank=True, null=True)),
                ('災害危険区域', models.BooleanField(default=False)),
                ('地区計画の区域', models.BooleanField(default=False)),
                ('建築協定区域', models.BooleanField(default=False)),
                ('blank_maru9_check', models.BooleanField(default=False)),
                ('blank_maru9_text', models.TextField(blank=True)),
                ('幅員_maru10', models.CharField(choices=[('4', '4m'), ('none', ' '), ('6', '6m')], default='none', max_length=10)),
                ('check_maru10', models.BooleanField(default=False)),
                ('路地状敷地の場合_check', models.BooleanField(default=False)),
                ('路地状敷地の場合_text', models.TextField(blank=True)),
                ('特殊建築物の場合_check', models.BooleanField(default=False)),
                ('特殊建築物の場合_text', models.TextField(blank=True)),
                ('blank_maru10_check', models.BooleanField(default=False)),
                ('blank_maru10_text', models.TextField(blank=True)),
                ('接道方向_1', models.CharField(blank=True, max_length=10, null=True)),
                ('公私道の別_1', models.CharField(choices=[('sidou', '私道'), ('koudo', '公道'), ('none', ' ')], default='none', max_length=10)),
                ('接道道路種類_1', models.CharField(choices=[('ka', 'カ'), ('ki', 'キ'), ('none', ' '), ('o', 'オ'), ('a', 'ア'), ('i', 'イ'), ('u', 'ウ'), ('e', 'エ')], default='none', max_length=10)),
                ('幅員_maru10_1', models.FloatField(blank=True, null=True)),
                ('接道長さ_1', models.FloatField(blank=True, null=True)),
                ('接道方向_2', models.CharField(blank=True, max_length=10, null=True)),
                ('公私道の別_2', models.CharField(choices=[('sidou', '私道'), ('koudo', '公道'), ('none', ' ')], default='none', max_length=10)),
                ('接道道路種類_2', models.CharField(choices=[('ka', 'カ'), ('ki', 'キ'), ('none', ' '), ('o', 'オ'), ('a', 'ア'), ('i', 'イ'), ('u', 'ウ'), ('e', 'エ')], default='none', max_length=10)),
                ('幅員_maru10_2', models.FloatField(blank=True, null=True)),
                ('接道長さ_2', models.FloatField(blank=True, null=True)),
                ('接道方向_3', models.CharField(blank=True, max_length=10, null=True)),
                ('公私道の別_3', models.CharField(choices=[('sidou', '私道'), ('koudo', '公道'), ('none', ' ')], default='none', max_length=10)),
                ('接道道路種類_3', models.CharField(choices=[('ka', 'カ'), ('ki', 'キ'), ('none', ' '), ('o', 'オ'), ('a', 'ア'), ('i', 'イ'), ('u', 'ウ'), ('e', 'エ')], default='none', max_length=10)),
                ('幅員_maru10_3', models.FloatField(blank=True, null=True)),
                ('接道長さ_3', models.FloatField(blank=True, null=True)),
                ('指定番号_年号', models.CharField(choices=[('h', '平成'), ('s', '昭和'), ('none', ' '), ('r', '令和')], default='none', max_length=10)),
                ('指定番号_日付', models.DateField(blank=True, null=True)),
                ('指定番号', models.IntegerField(blank=True, null=True)),
                ('カ_項目', models.CharField(choices=[('2', '2m'), ('3', '3m'), ('none', ' ')], default='none', max_length=10)),
                ('備考_maru10', models.TextField(blank=True)),
                ('敷地と道路との関係図', models.FileField(upload_to='documents/')),
                ('maru12', models.BooleanField(default=False)),
                ('古都保存法', models.BooleanField(default=False)),
                ('都市緑地法', models.BooleanField(default=False)),
                ('生産緑地法', models.BooleanField(default=False)),
                ('特定空港周辺特別措置法', models.BooleanField(default=False)),
                ('景観法', models.BooleanField(default=False)),
                ('大都市地域における住宅及び住宅地の供給の促進に関する特別措置法', models.BooleanField(default=False)),
                ('地方拠点都市地域の整備及び産業業務施設の再配置の促進に関する法律', models.BooleanField(default=False)),
                ('被災市街地復興特別措置法', models.BooleanField(default=False)),
                ('新住宅市街地開発法', models.BooleanField(default=False)),
                ('新都市基盤整備法', models.BooleanField(default=False)),
                ('旧市街地改造法', models.BooleanField(default=False)),
                ('首都圏の近郊整備地帯及び都市開発区域の整備に関する法律', models.BooleanField(default=False)),
                ('近畿圏の近郊整備区域及び都市開発区域の整備及び開発に関する法律', models.BooleanField(default=False)),
                ('流通業務市街地整備法', models.BooleanField(default=False)),
                ('都市再開発法', models.BooleanField(default=False)),
                ('沿道整備法', models.BooleanField(default=False)),
                ('集落地域整備法', models.BooleanField(default=False)),
                ('密集市街地における防災街区の整備の促進に関する法律', models.BooleanField(default=False)),
                ('地域における歴史的風致の維持及び向上に関する法律', models.BooleanField(default=False)),
                ('港湾法', models.BooleanField(default=False)),
                ('住宅地区改良法', models.BooleanField(default=False)),
                ('農地法', models.BooleanField(default=False)),
                ('宅地造成及び特定盛土等規制法', models.BooleanField(default=False)),
                ('マンション建替え円滑化法', models.BooleanField(default=False)),
                ('長期優良住宅の普及の促進に関する法律', models.BooleanField(default=False)),
                ('都市公園法', models.BooleanField(default=False)),
                ('自然公園法', models.BooleanField(default=False)),
                ('首都圏近郊緑地保全法', models.BooleanField(default=False)),
                ('近畿圏の保全区域の整備に関する法律', models.BooleanField(default=False)),
                ('都市の低炭素化の促進に関する法律', models.BooleanField(default=False)),
                ('水防法', models.BooleanField(default=False)),
                ('下水道法', models.BooleanField(default=False)),
                ('河川法', models.BooleanField(default=False)),
                ('特定都市河川浸水被害対策法', models.BooleanField(default=False)),
                ('海岸法', models.BooleanField(default=False)),
                ('津波防災地域づくりに関する法律', models.BooleanField(default=False)),
                ('砂防法', models.BooleanField(default=False)),
                ('地すべり等防止法', models.BooleanField(default=False)),
                ('急傾斜地法', models.BooleanField(default=False)),
                ('森林法', models.BooleanField(default=False)),
                ('森林経営管理法', models.BooleanField(default=False)),
                ('道路法', models.BooleanField(default=False)),
                ('踏切道改良促進法', models.BooleanField(default=False)),
                ('全国新幹線鉄道整備法', models.BooleanField(default=False)),
                ('土地収用法', models.BooleanField(default=False)),
                ('文化財保護法', models.BooleanField(default=False)),
                ('航空法', models.BooleanField(default=False)),
                ('国土利用計画法', models.BooleanField(default=False)),
                ('廃棄物の処理及び清掃に関する法律', models.BooleanField(default=False)),
                ('土壌汚染対策法', models.BooleanField(default=False)),
                ('都市再生特別措置法', models.BooleanField(default=False)),
                ('地域再生法', models.BooleanField(default=False)),
                ('高齢者障害者等の移動等の円滑化の促進に関する法律', models.BooleanField(default=False)),
                ('災害対策基本法', models.BooleanField(default=False)),
                ('東日本大震災復興特別区域法', models.BooleanField(default=False)),
                ('大規模災害からの復興に関する法律', models.BooleanField(default=False)),
                ('重要土地等調査法', models.BooleanField(default=False)),
                ('制限の内容_maru1', models.TextField(blank=True)),
                ('備考_maru1', models.TextField(blank=True)),
                ('区画整理', models.CharField(choices=[('keikakuari', '計画有'), ('sikochu', '試行中'), ('none', ' ')], default='none', max_length=10)),
                ('区画整理名称', models.CharField(blank=True, max_length=50, null=True)),
                ('仮換地指定', models.BooleanField(default=False)),
                ('仮換地指定_date', models.DateField(blank=True, null=True)),
                ('仮換地指定_号', models.IntegerField(blank=True, null=True)),
                ('換地処分公告日_予定', models.DateField(blank=True, null=True)),
                ('清算金_有', models.BooleanField(default=False)),
                ('清算金_無', models.BooleanField(default=False)),
                ('清算金_未定', models.BooleanField(default=False)),
                ('清算金_確定', models.IntegerField(blank=True, null=True)),
                ('清算金_交付', models.BooleanField(default=False)),
                ('清算金_徴収', models.BooleanField(default=False)),
                ('賦課金_有', models.BooleanField(default=False)),
                ('賦課金_確定', models.IntegerField(blank=True, null=True)),
                ('賦課金_無', models.BooleanField(default=False)),
                ('賦課金_未定', models.BooleanField(default=False)),
                ('制限の内容_maru2', models.TextField(blank=True)),
                ('負担', models.BooleanField(default=False)),
                ('備考_5', models.TextField(blank=True)),
                ('造成宅地防災区域_外', models.BooleanField(default=False)),
                ('造成宅地防災区域_内', models.BooleanField(default=False)),
                ('土砂災害警戒区域_外', models.BooleanField(default=False)),
                ('土砂災害警戒区域_内', models.BooleanField(default=False)),
                ('土砂災害特別警戒区域_外', models.BooleanField(default=False)),
                ('土砂災害特別警戒区域_内', models.BooleanField(default=False)),
                ('津波災害警戒区域_外', models.BooleanField(default=False)),
                ('津波災害警戒区域_内', models.BooleanField(default=False)),
                ('津波災害警戒区域_未指定', models.BooleanField(default=False)),
                ('津波災害特別警戒区域_外', models.BooleanField(default=False)),
                ('津波災害特別警戒区域_内', models.BooleanField(default=False)),
                ('洪水_有', models.BooleanField(default=False)),
                ('洪水_図面名称', models.CharField(blank=True, max_length=20, null=True)),
                ('洪水_無', models.BooleanField(default=False)),
                ('洪水_照会先', models.CharField(blank=True, max_length=20, null=True)),
                ('雨水出水_有', models.BooleanField(default=False)),
                ('雨水出水_図面名称', models.CharField(blank=True, max_length=20, null=True)),
                ('雨水出水_無', models.BooleanField(default=False)),
                ('雨水出水_照会先', models.CharField(blank=True, max_length=20, null=True)),
                ('高潮_有', models.BooleanField(default=False)),
                ('高潮_図面名称', models.CharField(blank=True, max_length=20, null=True)),
                ('高潮_無', models.BooleanField(default=False)),
                ('高潮_照会先', models.CharField(blank=True, max_length=20, null=True)),
                ('該当_9', models.BooleanField(default=False)),
                ('該当_9_text', models.TextField(blank=True)),
                ('備考_9', models.TextField(blank=True)),
                ('食用水_A', models.CharField(choices=[('suidokou', '水道(公営)'), ('suidosi', '水道(私営)'), ('ido', '井戸'), ('nashi', '無'), ('none', ' ')], default='none', max_length=10)),
                ('前面道路配管_食用水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('前面道路配管口径_食用水', models.FloatField(blank=True, null=True)),
                ('敷地内引込管_食用水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('敷地内引込管口径_食用水', models.FloatField(blank=True, null=True)),
                ('私設管の有無_食用水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('日付_食用水_C', models.DateField(blank=True, null=True)),
                ('食用水_C', models.BooleanField(default=False)),
                ('金額_食用水_C', models.IntegerField(blank=True, null=True)),
                ('ガス_A', models.CharField(choices=[('tosi', '都市ガス'), ('puroko', 'プロパン(個別)'), ('purosyu', 'プロパン(集中)'), ('nashi', '無'), ('none', ' ')], default='none', max_length=10)),
                ('ガス会社名_A', models.CharField(blank=True, max_length=10, null=True)),
                ('前面道路配管_ガス', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('前面道路配管口径_ガス', models.FloatField(blank=True, null=True)),
                ('敷地内引込管_ガス', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('日付_ガス_C', models.DateField(blank=True, null=True)),
                ('ガス_C', models.BooleanField(default=False)),
                ('金額_ガス_C', models.IntegerField(blank=True, null=True)),
                ('ガス_check', models.BooleanField(default=False)),
                ('ガス_detail', models.TextField(blank=True)),
                ('電気_有', models.BooleanField(default=False)),
                ('電気_小売電気事業者', models.CharField(blank=True, max_length=20, null=True)),
                ('電気_住所', models.CharField(blank=True, max_length=30, null=True)),
                ('電気_電話', models.CharField(blank=True, max_length=20, null=True)),
                ('電気_無', models.BooleanField(default=False)),
                ('日付_電気_C', models.DateField(blank=True, null=True)),
                ('電気_C', models.BooleanField(default=False)),
                ('金額_電気_C', models.IntegerField(blank=True, null=True)),
                ('汚水_A', models.CharField(choices=[('kokyogesui', '公共下水'), ('gappei', '個別浄化槽(合併)'), ('tandoku', '個別浄化槽(単独)'), ('syuchu', '集中浄化槽'), ('suitori', '汲取式'), ('nashi', '無'), ('none', ' ')], default='none', max_length=10)),
                ('前面道路配管_汚水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('私設管の有無_汚水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('浄化槽施設の必要_汚水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('日付_汚水_C', models.DateField(blank=True, null=True)),
                ('汚水_C', models.BooleanField(default=False)),
                ('金額_汚水_C', models.IntegerField(blank=True, null=True)),
                ('雑排水_A', models.CharField(choices=[('kokyogesui', '公共下水'), ('gappei', '個別浄化槽(合併)'), ('tandoku', '個別浄化槽(単独)'), ('syuchu', '集中浄化槽'), ('sintou', '浸透式'), ('sokukou', '側溝等'), ('nashi', '無'), ('none', ' ')], default='none', max_length=10)),
                ('前面道路配管_雑排水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('私設管の有無_雑排水', models.CharField(choices=[('NONE', ' '), ('YES', '有'), ('NO', '無')], default='NONE', max_length=10)),
                ('日付_雑排水_C', models.DateField(blank=True, null=True)),
                ('雑排水_C', models.BooleanField(default=False)),
                ('金額_雑排水_C', models.IntegerField(blank=True, null=True)),
                ('雨水_A', models.CharField(choices=[('kokyogesui', '公共下水'), ('sintou', '浸透'), ('sokukou', '側溝'), ('nashi', '無'), ('none', ' ')], default='none', max_length=10)),
                ('日付_雨水_C', models.DateField(blank=True, null=True)),
                ('雨水_C', models.BooleanField(default=False)),
                ('金額_雨水_C', models.IntegerField(blank=True, null=True)),
                ('備考_10', models.TextField(blank=True)),
                ('該当_11', models.BooleanField(default=False)),
                ('土地価格総額', models.IntegerField(blank=True, null=True)),
                ('支払う', models.BooleanField(default=False)),
                ('受領する', models.BooleanField(default=False)),
                ('交換差金_差金', models.IntegerField(blank=True, null=True)),
                ('交換差金_内消費税等', models.IntegerField(blank=True, null=True)),
                ('地代金', models.IntegerField(blank=True, null=True)),
                ('手付金_金額', models.IntegerField(blank=True, null=True)),
                ('固定資産税等_date', models.CharField(choices=[('A', '1月1日'), ('B', '4月1日'), ('none', ' ')], default='none', max_length=10)),
                ('固定資産税等_金額', models.IntegerField(blank=True, null=True)),
                ('授受目的_A', models.CharField(blank=True, max_length=100, null=True)),
                ('授受目的_A_金額', models.IntegerField(blank=True, null=True)),
                ('授受目的_A_消費税', models.IntegerField(blank=True, null=True)),
                ('授受目的_B', models.CharField(blank=True, max_length=100, null=True)),
                ('授受目的_B_金額', models.IntegerField(blank=True, null=True)),
                ('授受目的_B_消費税', models.IntegerField(blank=True, null=True)),
                ('授受目的_C', models.CharField(blank=True, max_length=100, null=True)),
                ('授受目的_C_金額', models.IntegerField(blank=True, null=True)),
                ('授受目的_C_消費税', models.IntegerField(blank=True, null=True)),
                ('授受目的_D', models.CharField(blank=True, max_length=100, null=True)),
                ('授受目的_D_金額', models.IntegerField(blank=True, null=True)),
                ('授受目的_D_消費税', models.IntegerField(blank=True, null=True)),
                ('備考_2_2', models.TextField(blank=True)),
                ('事項1', models.BooleanField(default=False)),
                ('事項1_条', models.IntegerField(blank=True, null=True)),
                ('事項2', models.BooleanField(default=False)),
                ('事項2_条', models.IntegerField(blank=True, null=True)),
                ('事項3', models.BooleanField(default=False)),
                ('事項3_条', models.IntegerField(blank=True, null=True)),
                ('事項4', models.BooleanField(default=False)),
                ('事項4_条', models.IntegerField(blank=True, null=True)),
                ('事項5', models.BooleanField(default=False)),
                ('事項5_条', models.IntegerField(blank=True, null=True)),
                ('事項6', models.BooleanField(default=False)),
                ('事項6_条', models.IntegerField(blank=True, null=True)),
                ('事項7', models.BooleanField(default=False)),
                ('事項7_条', models.IntegerField(blank=True, null=True)),
                ('事項8', models.TextField(blank=True)),
                ('事項8_条', models.TextField(blank=True)),
                ('定め_4_有', models.BooleanField(default=False)),
                ('定め_4_条1', models.IntegerField(blank=True, null=True)),
                ('定め_4_無', models.BooleanField(default=False)),
                ('land_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_1', to='myapp.land')),
                ('land_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_2', to='myapp.land')),
                ('land_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_3', to='myapp.land')),
                ('land_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_4', to='myapp.land')),
                ('land_5', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_5', to='myapp.land')),
                ('user_A', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_user_A', to='myapp.userprofile')),
                ('user_B', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='land_m_user_B', to='myapp.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='land',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.order'),
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_date', models.DateField()),
                ('contract_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.apartment')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.buyer')),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('land_address', models.CharField(blank=True, max_length=255, null=True)),
                ('house_number', models.CharField(blank=True, max_length=255, null=True)),
                ('real_estate_number', models.CharField(blank=True, max_length=255, null=True)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('area_floor', models.IntegerField(blank=True, null=True)),
                ('building_type', models.CharField(choices=[('HOUSE', '居宅'), ('APARTMENT', '共同住宅'), ('INN', '旅館'), ('SHOP', '店舗'), ('FACTORY', '工場'), ('DOMITORY', '寄宿舎'), ('OFFICE', '事務所'), ('INN', '旅館'), ('RESTRANT', '料理店'), ('STARAGE', '倉庫'), ('CARAGE', '車庫'), ('SCHOOL', '校舎'), ('BANK', '銀行'), ('HOSPITAL', '病院'), ('ETC', 'その他')], default='HOUSE', max_length=10)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.order')),
            ],
        ),
        migrations.AddField(
            model_name='apartment',
            name='building',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.building'),
        ),
    ]
